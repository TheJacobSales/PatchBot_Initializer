import requests
import os
import json
import base64

from requests.api import get

def authEncrypt(jamfAuthCerts):
    jamfAuthCertsEncode = jamfAuthCerts.encode("ascii")
    base64_bytes = base64.b64encode(jamfAuthCertsEncode)
    base64_string = base64_bytes.decode("ascii")
    return base64_string

def jamfCerts(jamfAuthCerts):
    encodedCerts = authEncrypt(jamfAuthCerts)
    return {"jamfClassic": encodedCerts,
        "jamfProToken": "xxxxxxxxxx"}

def main():
    #----------------------- Header Setup -------------------------
    with open('config.json') as inFile:
        configData = json.load(inFile)

    requestToken = jamfCerts(configData["jamfCerts"])

    jamfUrl = "https://casper.ts.fresnostate.edu"
    getHeader = {
            'Authorization': f'Basic {requestToken["jamfClassic"]}',
            'Accept': 'application/json'
    }
    allPoliciesURL = f"{jamfUrl}/JSSResource/policies"

    #----------------------- Check if Policy was created -------------------------
    appName = input("Please enter in the application name used by the policy created(Eg. GoogleDrive, Google Chrome): ")
    appName = str(appName)

    responce = requests.get(url=allPoliciesURL, headers=getHeader)
    policyList = responce.json()
    policyNameInstall = f"Install Latest {appName}"
    policyNameTEST = f"TEST-{appName}"
    foundPolicy = False
    for policy in policyList["policies"]:
        if policyNameInstall == policy["name"]:
            policyID = policy["id"]
            print(f"Found {policyNameInstall} with policy ID of {policyID}")
            foundPolicy = True
            break
        elif policyNameTEST == policy["name"]:
            policyID = policy["id"]
            print(f"Found {policyNameTEST} with policy ID of {policyID}")
            foundPolicy = True
            break
    if foundPolicy == False:
        print(f"Cound not find policy with names: {policyNameInstall} or {policyNameTEST}\nPolicy probably not created.")
        raise SystemExit

    #----------------------- Check of Patch was Created -------------------------
    policyIDURL = f"{jamfUrl}/JSSResource/policies/id/{policyID}"

    patchName = input("Please enter in the patch name used in the patch created(Eg. GoogleDrive, Google Chrome): ")
    patchName = str(patchName)

    allPatchesURL = f"{jamfUrl}/JSSResource/patchsoftwaretitles"
    responce = requests.get(url=allPatchesURL, headers=getHeader)
    softwareTitles = responce.json()
    foundPatch = False

    for patch in softwareTitles["patch_software_titles"]:
        if patchName == patch["name"]:
            patchID = patch["id"]
            print(f"Found {patchName} with patch ID of {patchID}")
            foundPatch = True
            break
    if foundPatch == False:
        print(f"Cound not find patch with name: {patchName}\nPlease create the patch or confirm it's correct name before retrying script")
        raise SystemExit
    
    #----------------------- Find Name of the Package -------------------------
    pkgName = input("Please enter in the name of the package used in the patch created(Eg. GoogleDrive, Opera): ")
    pkgName = str(patchName)

    #----------------------- Create Patch Policy Test and Stable ----------------
    patchPoliciesURL = f"{jamfUrl}/JSSResource/patchpolicies/softwaretitleconfig/id/{patchID}"
    print(patchPoliciesURL)
    response = requests.get(url=patchPoliciesURL, headers=getHeader)
    patchPolicies = response.json()
    print(patchPolicies)

    response = requests.post(url=patchPoliciesURL, headers=getHeader)

    

if __name__ == "__main__":
    main()